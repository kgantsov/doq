syntax = "proto3";

package queue;

option go_package = "github.com/kgantsov/doq/pkg/proto;proto";

service DOQ {
    rpc GenerateIDs(GenerateIDsRequest) returns (GenerateIDsResponse);
    rpc CreateQueue(CreateQueueRequest) returns (CreateQueueResponse);
    rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse);
    rpc GetQueue(GetQueueRequest) returns (GetQueueResponse);
    rpc GetQueues(GetQueuesRequest) returns (GetQueuesResponse);

    rpc Enqueue(EnqueueRequest) returns (EnqueueResponse) {}
    rpc EnqueueStream(stream EnqueueRequest) returns (stream EnqueueResponse) {}

    rpc Dequeue(DequeueRequest) returns (DequeueResponse) {}
    rpc DequeueStream(stream DequeueRequest) returns (stream DequeueResponse) {}

    rpc Get(GetRequest) returns (GetResponse) {}
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    rpc Ack(AckRequest) returns (AckResponse);
    rpc Nack(NackRequest) returns (NackResponse);
    rpc UpdatePriority(UpdatePriorityRequest) returns (UpdatePriorityResponse);
}

message LeaderConfigChange {
  string node_id = 1;
  string raft_addr = 2;
  string grpc_addr = 3;
}

message GenerateIDsRequest {
    int32 number = 1;
}

message GenerateIDsResponse {
    bool success = 1;
    repeated uint64 ids = 2;
}

message QueueSettings {
    enum Strategy {
        STRATEGY_UNSPECIFIED = 0;
        ROUND_ROBIN = 1;
        WEIGHTED = 2;
    }

    Strategy strategy = 1;
    uint32 max_unacked = 2;
    uint32 ack_timeout = 3; // in seconds
}

message Queue {
    string name = 1;
    string type = 2;

    QueueSettings settings = 3;
}

message Message {
    string group = 1;
    uint64 id = 2;
    int64 priority = 3;
    string content = 4;
    map<string, string> metadata = 5;
}

message LeaderConfiguration {
  string node_id = 1;
  string raft_addr = 2;
  string grpc_addr = 3;
}

message SnapshotItem {
  oneof item {
    Queue queue = 1;
    Message message = 2;

    LeaderConfiguration leader_configuration = 3;
  }
}

message CreateQueueRequest {
    string name = 1;
    string type = 2;

    QueueSettings settings = 3;
}

message CreateQueueResponse {
    bool success = 1;
}

message DeleteQueueRequest {
    string name = 1;
}

message DeleteQueueResponse {
    bool success = 1;
}


message GetQueueRequest {
    string name = 1;
}

message Stats {
    double enqueueRPS = 1;
    double dequeueRPS = 2;
    double ackRPS = 3;
    double nackRPS = 4;
}

message GetQueueResponse {
    string name = 1;
    string type = 2;

    QueueSettings settings = 3;

    Stats stats = 4;

    int64 ready = 5; // Number of messages ready to be dequeued
    int64 unacked = 6; // Number of messages that have been dequeued but not acknowledged
    int64 total = 7; // Total number of messages in the queue
}

message GetQueuesRequest {
    string type = 1; // Optional filter by queue type
}

message GetQueuesResponse {
    repeated GetQueueResponse queues = 1;
}

message EnqueueRequest {
    string queueName = 1;
    uint64 id = 2;
    string group = 3;
    int64 priority = 4;
    string content = 5;
    map<string, string> metadata = 6;
}

message EnqueueResponse {
    bool success = 1;
    string queueName = 2;
    uint64 id = 3;
    string group = 4;
    int64 priority = 5;
    string content = 6;
    map<string, string> metadata = 7;
}

message DequeueRequest {
    string queueName = 1;
    bool ack = 2;
}

message DequeueResponse {
    bool success = 1;
    string queueName = 2;
    uint64 id = 3;
    string group = 4;
    int64 priority = 5;
    string content = 6;
    map<string, string> metadata = 7;
}

message GetRequest {
    string queueName = 1;
    uint64 id = 2;
}

message GetResponse {
    bool success = 1;
    string queueName = 2;
    uint64 id = 3;
    string group = 4;
    int64 priority = 5;
    string content = 6;
    map<string, string> metadata = 7;
}

message DeleteRequest {
    string queueName = 1;
    uint64 id = 2;
}

message DeleteResponse {
    bool success = 1;
}

message AckRequest {
    string queueName = 1;
    uint64 id = 2;
}

message AckResponse {
    bool success = 1;
}

message NackRequest {
    string queueName = 1;
    uint64 id = 2;
    int64 priority = 3;
    map<string, string> metadata = 4;
}

message NackResponse {
    bool success = 1;
}

message UpdatePriorityRequest {
    string queueName = 1;
    uint64 id = 2;
    int64 priority = 3;
}

message UpdatePriorityResponse {
    bool success = 1;
}

message RaftCommand {
  oneof cmd {
    CreateQueueRequest createQueue = 1;
    DeleteQueueRequest deleteQueue = 2;
    GetQueueRequest getQueue = 3;
    GetQueuesRequest getQueues = 4;

    EnqueueRequest enqueue = 5;
    DequeueRequest dequeue = 6;
    GetRequest get = 7;
    DeleteRequest delete = 8;
    AckRequest ack = 9;
    NackRequest nack = 10;
    UpdatePriorityRequest updatePriority = 11;

    LeaderConfigChange leaderConfigChange = 12;
  }
}