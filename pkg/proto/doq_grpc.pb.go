// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: pkg/proto/doq.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DOQ_CreateQueue_FullMethodName    = "/queue.DOQ/CreateQueue"
	DOQ_DeleteQueue_FullMethodName    = "/queue.DOQ/DeleteQueue"
	DOQ_Enqueue_FullMethodName        = "/queue.DOQ/Enqueue"
	DOQ_EnqueueStream_FullMethodName  = "/queue.DOQ/EnqueueStream"
	DOQ_Dequeue_FullMethodName        = "/queue.DOQ/Dequeue"
	DOQ_DequeueStream_FullMethodName  = "/queue.DOQ/DequeueStream"
	DOQ_Ack_FullMethodName            = "/queue.DOQ/Ack"
	DOQ_Nack_FullMethodName           = "/queue.DOQ/Nack"
	DOQ_UpdatePriority_FullMethodName = "/queue.DOQ/UpdatePriority"
)

// DOQClient is the client API for DOQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DOQClient interface {
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	EnqueueStream(ctx context.Context, opts ...grpc.CallOption) (DOQ_EnqueueStreamClient, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	DequeueStream(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (DOQ_DequeueStreamClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error)
	UpdatePriority(ctx context.Context, in *UpdatePriorityRequest, opts ...grpc.CallOption) (*UpdatePriorityResponse, error)
}

type dOQClient struct {
	cc grpc.ClientConnInterface
}

func NewDOQClient(cc grpc.ClientConnInterface) DOQClient {
	return &dOQClient{cc}
}

func (c *dOQClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, DOQ_CreateQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	out := new(DeleteQueueResponse)
	err := c.cc.Invoke(ctx, DOQ_DeleteQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, DOQ_Enqueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) EnqueueStream(ctx context.Context, opts ...grpc.CallOption) (DOQ_EnqueueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DOQ_ServiceDesc.Streams[0], DOQ_EnqueueStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dOQEnqueueStreamClient{stream}
	return x, nil
}

type DOQ_EnqueueStreamClient interface {
	Send(*EnqueueRequest) error
	Recv() (*EnqueueResponse, error)
	grpc.ClientStream
}

type dOQEnqueueStreamClient struct {
	grpc.ClientStream
}

func (x *dOQEnqueueStreamClient) Send(m *EnqueueRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dOQEnqueueStreamClient) Recv() (*EnqueueResponse, error) {
	m := new(EnqueueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dOQClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, DOQ_Dequeue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) DequeueStream(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (DOQ_DequeueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DOQ_ServiceDesc.Streams[1], DOQ_DequeueStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dOQDequeueStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DOQ_DequeueStreamClient interface {
	Recv() (*DequeueResponse, error)
	grpc.ClientStream
}

type dOQDequeueStreamClient struct {
	grpc.ClientStream
}

func (x *dOQDequeueStreamClient) Recv() (*DequeueResponse, error) {
	m := new(DequeueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dOQClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, DOQ_Ack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error) {
	out := new(NackResponse)
	err := c.cc.Invoke(ctx, DOQ_Nack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOQClient) UpdatePriority(ctx context.Context, in *UpdatePriorityRequest, opts ...grpc.CallOption) (*UpdatePriorityResponse, error) {
	out := new(UpdatePriorityResponse)
	err := c.cc.Invoke(ctx, DOQ_UpdatePriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DOQServer is the server API for DOQ service.
// All implementations must embed UnimplementedDOQServer
// for forward compatibility
type DOQServer interface {
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	EnqueueStream(DOQ_EnqueueStreamServer) error
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	DequeueStream(*DequeueRequest, DOQ_DequeueStreamServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	Nack(context.Context, *NackRequest) (*NackResponse, error)
	UpdatePriority(context.Context, *UpdatePriorityRequest) (*UpdatePriorityResponse, error)
	mustEmbedUnimplementedDOQServer()
}

// UnimplementedDOQServer must be embedded to have forward compatible implementations.
type UnimplementedDOQServer struct {
}

func (UnimplementedDOQServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedDOQServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedDOQServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedDOQServer) EnqueueStream(DOQ_EnqueueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EnqueueStream not implemented")
}
func (UnimplementedDOQServer) Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedDOQServer) DequeueStream(*DequeueRequest, DOQ_DequeueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DequeueStream not implemented")
}
func (UnimplementedDOQServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedDOQServer) Nack(context.Context, *NackRequest) (*NackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedDOQServer) UpdatePriority(context.Context, *UpdatePriorityRequest) (*UpdatePriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriority not implemented")
}
func (UnimplementedDOQServer) mustEmbedUnimplementedDOQServer() {}

// UnsafeDOQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DOQServer will
// result in compilation errors.
type UnsafeDOQServer interface {
	mustEmbedUnimplementedDOQServer()
}

func RegisterDOQServer(s grpc.ServiceRegistrar, srv DOQServer) {
	s.RegisterService(&DOQ_ServiceDesc, srv)
}

func _DOQ_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_EnqueueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DOQServer).EnqueueStream(&dOQEnqueueStreamServer{stream})
}

type DOQ_EnqueueStreamServer interface {
	Send(*EnqueueResponse) error
	Recv() (*EnqueueRequest, error)
	grpc.ServerStream
}

type dOQEnqueueStreamServer struct {
	grpc.ServerStream
}

func (x *dOQEnqueueStreamServer) Send(m *EnqueueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dOQEnqueueStreamServer) Recv() (*EnqueueRequest, error) {
	m := new(EnqueueRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DOQ_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_DequeueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DequeueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DOQServer).DequeueStream(m, &dOQDequeueStreamServer{stream})
}

type DOQ_DequeueStreamServer interface {
	Send(*DequeueResponse) error
	grpc.ServerStream
}

type dOQDequeueStreamServer struct {
	grpc.ServerStream
}

func (x *dOQDequeueStreamServer) Send(m *DequeueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DOQ_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_Nack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOQ_UpdatePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOQServer).UpdatePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOQ_UpdatePriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOQServer).UpdatePriority(ctx, req.(*UpdatePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DOQ_ServiceDesc is the grpc.ServiceDesc for DOQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DOQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.DOQ",
	HandlerType: (*DOQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _DOQ_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _DOQ_DeleteQueue_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _DOQ_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _DOQ_Dequeue_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _DOQ_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _DOQ_Nack_Handler,
		},
		{
			MethodName: "UpdatePriority",
			Handler:    _DOQ_UpdatePriority_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnqueueStream",
			Handler:       _DOQ_EnqueueStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DequeueStream",
			Handler:       _DOQ_DequeueStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/doq.proto",
}
